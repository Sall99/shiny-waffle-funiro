// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Products {
  id                    String      @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  title                 String
  category              String
  description           String
  price                 Float
  promoPrice            Float
  defaultImage          String
  imageUrl              String[]
  additionalInformation String[]
  reviews               Review[]
  OrderItem             OrderItem[]
}

type Review {
  author  String
  rating  Int
  comment String
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  email          String         @unique
  lname          String?
  fname          String?
  name           String?
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  AddressBoook   AddressBoook[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model AddressBoook {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  fname          String
  lname          String
  companyName    String
  countryRegion  String
  street         String
  townCity       String
  province       String
  zipCode        String
  phone          String
  email          String
  additionalInfo String
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Order          Order[]
}

model Order {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  userId        String       @db.ObjectId
  items         OrderItem[]
  total         Float
  status        orderStatus  @default(PENDING)
  addressBookId String       @db.ObjectId
  addressBook   AddressBoook @relation(fields: [addressBookId], references: [id], onDelete: Cascade)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  product   Products @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  Order     Order    @relation(fields: [orderId], references: [id])
}

enum orderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}
